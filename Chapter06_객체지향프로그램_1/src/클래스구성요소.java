/*
 * class ClassName{
 * 
 * 		------------
 * 		변수 : 클래스 전체에 사용
 * 			다른 클래스에서 사용이 가능
 * 			ㄴ 클래스 멤버변수
 * 		------------
 * 		생성자 : 클래스 동일
 * 				변수의 초기화
 * 		------------
 * 		메소드 : 기능 처리
 * 			
 * }
 * 
 * 
 * 
 * 	프로그램 
 * 		ㄴ 1. 변수
 * 		ㄴ 2. 변수 처리 방법 => 메소드
 * 
 * 	=> 1. 변수 설정 : 멤버변수 / 지역 변수 / 매개 변수(사용자 요청을 받는 경우)
 * 
 * 	메소드
 *  	ㄴ 1. 반복 제거
 * 		ㄴ 2. 구조적인 프로그램
 * 			ㄴ단락나눠서 처리
 * 		ㄴ 3. 관련된 명령문을 모아서 처리
 * 		ㄴ 4. 재사용
 * 		ㄴ 5. 다른 클래스와 통신
 * 			----------------
 * 			ㄴ 수정 / 추가
 * 		ㄴ 6. 메소드 => 다음에 사용할 수 있게
 * 					한가지 기능 수행
 * 		-------------------------------
 * 		메소드 
 * 			ㄴ 1) 형식
 * 				ㄴ [접근 지정어][제어어]
 * 					ㄴ default / static / abstract / final
 * 								-------
 * 							=> 컴파일시 자동 저장
 * 							=> 추상 메소드 : 선언
 * 							=> 종단 => 수정이 불가능
 * 				public / private / protected / default
 * 
 * 				=> static 공통
 * 				=> static이 없는 경우는 객체
 * 				
 * 				[접근지정어][제어어] 리턴형 메소드명 (매개변수..){
 * 						
 * 
 * 					return 결과값
 * 
 * 				}
 * 
 * 				리턴형 : 사용자가 요청한 내용을 처리후에 결과값을 보내준다
 * 					예)
 * 						사용자 정수 2개 => +한 값 요청
 * 						=> 정수
 * 					=> 리턴은 반드시 한개만 전송이 가능
 * 					=> 여러개 : 배열 / 클래스
 * 							-------------
 * 					=> 일반 데이터형 (참조형 : string, 배열)
 * 				메소드명 : 소문자로 시작
 * 						ㄴ 변수 => 식별자 동일
 * 				매개변수 : 사용자가 요청값
 * 				---------------------------------------
 * 				결과 값이 없는 경우 : 오라클에 저장해달라 ( 삭제 , 수정 )
 * 							ㄴ void
 * 			
 * 			ㄴ 2) 한가지 기능이 어디까지 인지...
 * 
 * 			ㄴ 3) 사용자로부터 받는 값 : .매개변수 (메소드 인자)
 * 					ㄴ 여러개 사용이 가능
 * 						-------------
 * 
 * 			ㄴ 4) 처리 결과 : 리턴형
 * 					---------------출력해라 void
 * 				리턴형		매개변수
 * 				  O			  O
 * 				String replace(char c1, char c2)
 * 				-------------------
 * 
 * 			ㄴ 5)동작 순서
 * 				ㄴ 메소드 호출전까지 수행
 * 				ㄴ 메소드 이동 => 메소드 종료시 까지 수행
 * 								-----------------
 * 				ㄴ 호출한 위치로 이동
 * 				ㄴ 밑에 있는 문장 수행
 * 
 * 			ㄴ 6)호출 방법
 * 					ㄴ 1. 같은 클래스안에서 호출(위 코드 저장안됨)
 * 						class A{
 * 							void display{
 * 						
 * 							}
 * 						public static void main(String[] args){
 * 							display(); => 오류 발생
 * 								ㄴ A a = new A();
 * 								ㄴ a.display();
 * 								}
 * 						}
 * 						
 * 						근본적인 해결 방법
 * 						class A{
 * 							
 * 						static void display();
 * 							
 * 						public static void main(String[] args){
 * 
 * 								display();
 * 									// A a = new A(); 이거랑
 * 									//  a.display(); 이거 안넣어도 됨
 * 								}
 * 						}
 * 
 * 					ㄴ 2. 다른 클래스에서 호출
 * 						class A{
 * 
 * 							B.display() => Math.random();
 * 
 * 							String s = "Hello";
 * 							s.trim()
 * 							String ss = " Hello Java"
 * 						}
 * 						class B{
 * 							static void display(){
 * 
 * 							}
 * 						}
 * 					ㄴ 3. 인스턴스 메소드 호출
 * 
 * 
 * 
 */



public class 클래스구성요소 {

	public static void main(String[] args) {
		
		
		
		
	}

}
