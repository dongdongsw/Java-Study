/*
 * 클래스 제작
 * 	ㄴ 기능 (동작 => 메소드) => 액션 클래스
 * 							--------
 * 							~DAO, ~Model
 * 									ㄴ 브라우저 연동
 * 							ㄴ 오라클 연동
 * 		ㄴ 생성자, 변수가 필요없다
 * 
 * 	ㄴ 데이터형을 제작 => 데이터형 클래스
 * 		ㄴ 변수
 * 			ㄴ 생성자 / 메소드
 * 			ㄴ ~VO, ~ DTO => 데이터를 모아서 전송할 목적
 * 			ㄴ 캡슐화
 * 	----------------------------------------------------
 * 	메소드 : 기능
 * 		=종류
 * 			ㄴ 1) 인스턴스 메소드 => 객체마다 따로 동작
 * 			ㄴ 2) 정적 메소드 => static
 * 				 	ㄴ 클래스명.메소드()
 * 					ㄴ Math.random()
 * 					ㄴ String.valueOf()
 * 						ㄴ 디자인 패턴 => 싱글톤 패턴
 * 										----------
 * 										 ㄴ 데이터베이스 연동
 * 			ㄴ 3) 종단 메소드 => 상속에서 => 오버라이딩이 안된는 메소드
 * 				ㄴ final
 * 			ㄴ 4) 선언만 하는 메소드 : 인터페이스
 * 				ㄴ abstract
 * 				ㄴ 버튼 클릭
 * 				ㄴ 마우스 클릭
 * ----------------------------------------------------
 * 		메소드 : 특정 기능을 수행하는 명령문으 집합
 * 				-------- 목록 / 삭제 / 추가 / 상세보기...
 * 				ㄴ 구조적인 프로그램
 * 					ㄴ 단락 => 가독성이 좋다
 * 				ㄴ 다른 클래스와 통신을 할 때 사용 : 메시지
 * 				ㄴ 재사용
 * 				ㄴ 한가지 기능만 수행
 * 				ㄴ 분업이 가능
 * 				ㄴ 일반 사이트 : MVC  => spring 
 * 							-------front / back
 * 				---------------------------------
 * 				벤치 마킹 : 메소드 찾기
 * 		1. 형식
 * 			ㄴ 변수 형식 
 * 				ㄴ [접근 지정어][제어어] 데이터형 변수명
 * 				ㄴ 생성자
 * 					ㄴ [접근지정어] 클래스명() {}
 * 				ㄴ 메소드 형식
 * 					ㄴ [접근지정어][제어어] 리턴형 메소드명(매개변수...){}
 * 		2. 접근 지정어
 * 			ㄴ 변수 / 메소드 / 클래스 / 생성자
 * 			ㄴ 접근 권한을 지정해서 사용
 * 			ㄴ 접근 범위에 따라 순서
 * 				ㄴ private < default < protected < public
 * 
 * 			ㄴ 	private : (인스턴스 변수(데이터 보호))
 * 					ㄴ 같은 클래스 내부에서만 접근이 가능 => 자신 클래스안에서만 사용이 가능
 * 					ㄴ 인스턴스 변수 => 은닉화 => 캡슐화
 * 
 * 				default : (
 * 					ㄴ 같은 폴더까지만 접근이 가능
 * 
 * 				protected 
 * 					ㄴ 같은 폴더까지만 접근이 가능, 다른 폴더인 경우에 상속
 *  
 * 				public : 다른 통신이 가능 (클래스 / 생성자 / 메소드)
 * 					ㄴ 모든 클래스에 접근 가능
 * 				---------------------------------------------------------------------------
 * 							자신의 클래스 |  같은 폴더  |	상속받은 경우   | 		모든 클래스 
 * 				---------------------------------------------------------------------------
 * 				private			O
 * 				---------------------------------------------------------------------------
 * 				default			O			O
 * 				---------------------------------------------------------------------------
 * 				protected		O			O				O					
 * 				---------------------------------------------------------------------------
 * 				public			O			O				O					O
 * 				---------------------------------------------------------------------------
 * 				
 * 				private int age;
 * 				private String name;
 * 				--------------------
 * 				public 클래스명(){}
 * 				--------------------
 * 				public int add(){}
 * 
 * 
 * 
 * 			2-1. 제어어
 * 					ㄴ final : 종단 => 종단 클래스 => public final class String
 * 												  public final class Math
 * 					ㄴ static : 정적 => 공유 / 콩통으로 사용
 * 							ㄴ public static int a;
 * 							ㄴ public static void display(){}
 * 			
 * 					ㄴ abstract : 클래스 종류 => 추상 클래스 / 인터페이스
 * 							ㄴ 기능은 동일 => 구현이 다른 경우
 * 							ㄴ class/method
 * 							ㄴ public abstract class ClassName{
 * 
 * 								public abstract void display();
 * 
 * 								}
 * 
 * 
 * 		3. 패키지 제작
 * 			ㄴ 객체마다 따라 동작 => 인스턴스 메소드
 * 			ㄴ [접근 지정어] 리턴형 메소드명(매개변수...)
 * 				{
 * 					return 값 ==> 생략 void => 생략이 되면 자동으로 컴파일러가 추가
 * 				}	  |
 * 					메소드 종료
 * 					1. import java.lang.*; => String, System, Math... 이러한 것들이 들어가 있다
 * 					2. 기본 생성자
 * 					3. 메소드 void 일 경우 => return 
 * 					4. extends Object
 * 					5. try ~ catch
 * 						ㄴ CheckException / UnCheckException
 * 
 * 
 * 
 * 
 */

class Sawon{
	public Sawon() {
		System.out.println("객체 생성");
	}
	
	public void print() {
		System.out.println("객체 활용");
	}

	@Override
	protected void finalize() throws Throwable {
		
		System.out.println("객체 소멸"); 
		
	}


}
/*
 * 		=> 요구사항 분석
 * 			ㄴ 1. 기능 목록 작성
 * 			ㄴ 2. 시나리오 작성
 * 			
 * 		=> 객체 도출
 * 			ㄴ 1. 명사 => 클래스 후보 
 * 
 * 		=> 역할 분담
 */



public class 객체지향용어_2 {
//	public 객체지향용어_2() {
//		this.
//	}

	public static void main(String[] args) {

			Sawon s = new Sawon();
			s.print();
			s=null;
			System.gc(); //가비지 컬렉션
		
	}

}
