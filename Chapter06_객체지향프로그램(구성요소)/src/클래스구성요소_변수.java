
/*
 * 1. 변수 - 데이터 저장방법 ( 메모리 )
 * 			ㄴ 한개 : 변수 => 기본형 ( 이미 지정된 메모리 크기 )
 * 			ㄴ 같은 데이터 여러개 : 배열
 * 			ㄴ 다른 데이터 여러개 : 클래스 => 참조형 (개발자가 지정)
 * 
 * 2. 연산자 / 제어문 
 * 		ㄴ 변수에 대한 연산 처리
 * 		ㄴ 메소드
 * 		ㄴ 데이터 가공
 * 
 *  	ㄴ ( 화면 출력 )
 * 			ㄴ 가공된 데이터 출력
 * 
 * 3. 변수 / 메소드 /화면 출력 => 클래스
 * 								ㄴ 관련된 클래스 묶음 : 패키지 
 * 		1) 구성
 * 		2) 패키지
 * 		3) 접근지정어 
 * 		=> 변수의 초기화
 * 
 * 4. 기본
 * 		ㄴ의뢰( PM ) ==== 요구사항 분석( PM ) ==== 데이터 설계( DBA ) ==== 구현( 프로그래머 ) ==== 테스팅( 테스터 ) ==== 배포( 운영 )
 * 																	|				|				|
 * 																	---------------------------------	
 * 																				  devops
 * 			|
 * 		클래스 설계
 * 
 * 5. 객체지향의 목적
 * 		ㄴ 1) 유지보수 : 수정시 영향을 최소화
 * 				ㄴ 다른 클래스에 영향을 주면 안됨 => 결합성
 * 				ㄴ 결합성이 낮은 프로그램
 * 				ㄴ 인터페이스 => 스프링
 * 
 * 		ㄴ 2) 재사용 : 상속( is - a ) / 포함( has - a )
 * 
 * 		ㄴ 3) 확장성 높은 프로그램 => 추가 / 수정
 * 								------------ 다형성
 * 				ㄴ 호환성 ( 운영체제의 독립적이다 )
 * 
 * 		ㄴ 4) 코드 가독성 증가 ( 코드가 간결하다 )
 * 				ㄴ 검증된 소스를 사용하기 떄문에 신뢰성이 뛰어나다 => 라이브러리
 * 
 * 		ㄴ 5) 데이터를 보호 : 캡슐화
 * 
 * ------------------------------------------------------------------------
 * 
 * 	1. 캡슐화 : 접근 지정어 => 접근 범위
 * 		ㄴ 변수와 관련됨
 * 		ㄴ 접근 지정어 : private / protected / default / public
 * 
 * 	2. 재사용 : 상속 / 포함
 * 					ㄴ 기존의 클래스를 있는 그래로 사용
 * 				ㄴ 기존의 클래스를 확장해서 사용 ( extends )
 * 								ㄴ 변경을 해서 사용
 * 
 * 	3. 수정 / 추가 : 다형성
 * 		ㄴ 오버라이딩 / 오버로딩
 * 
 * 	4. 추상화 
 * 		ㄴ 공통 모듈 => 공통적인 => 소스를 간결
 * 		ㄴ 추상 클래스 / 인터페이스 ( 추상 클래스의 확장 )
 * ------------------------------------------------------------------------ 객체지향 4대 요소
 *
 * 	객체 지향 제작	
 * 		ㄴ 클래스 : 데이터를 여려개 묶어서 메모리에 한번에 저장하기 위한 설계 
 * 				  ------------ 관련된 데이터를 묶는다
 * 					맛집 / 게시판 / 영화 / 음악 / 레시피 / 캠핑 / 쇼핑몰
 * 
 * 		ㄴ 클래스 구성 요소 
 * 			ㄴ 데이터 저장 : 변수
 * 			ㄴ 데이터 활용 : 메소드
 * 			ㄴ 데이터 주입 ( 초기화 ) : 생성자
 * 			-----------------------------
 * 			1) 변수
 * 				ㄴ 인스턴스 변수 
 *  				ㄴ 저장되는 시점 : new를 사용해야 저장된다.	
 * 					ㄴ 객체마다 따라 생성되는 메모리
 * 					ㄴ 힙 메모리에 저장
 * 					ㄴ 프로그램 종료 시점까지 유지
 * 					ㄴ 전역 변수 ( 클래스 전체에서 사용하는 변수 )
 * 								 
 * 				ㄴ 정적 변수
 * 					ㄴ 저장되는 시점 : 컴파일시에 저장 ( 자동 저장 )
 * 					ㄴ 메모리 공간을 1개만 사용
 * 					ㄴ MethodArea에 저장
 * 					ㄴ 공통으로 사용되는 변수가 있는 경우
 * 						ㄴ 데이터베이스 ( 오라클, MySQL ) => 공유 변수
 * 						ㄴ 로고
 * 
 * 				ㄴ 지역 변수
 * 					ㄴ 주로 메소드에서 사용
 * 					ㄴ 저장되는 시점 : 메소드 호출
 * 					ㄴ 메소드가 종료시에 자동 회수
 * 					ㄴ 스택 공간에 저장
 * 					ㄴ 유사한 변수 : 매개 변수
 * --------------------------------------------------------------------------
 * 
 * 1. 선언 위치
 * 		ㄴ class ClassName{
 * 			---------------------
 * 			인스턴스 변수 / 정적 변수
 * 			---------------------
 * 			메소드 
 * 				ㄴ 지역 변수
 * 			---------------------
 * 			}
 * 
 * 2. 저장 위치
 * 		ㄴ 인스턴스 : Heap
 * 		ㄴ 정적 변수 : MethodArea
 * 		ㄴ 지역 변수 : 메소드
 * 
 * 3. 생명 주기
 * 		ㄴ 인스턴스 : Heap
 * 		ㄴ 정적 변수 : MethodArea
 * 		--------------------------프로그램 종료시까지
 * 		ㄴ 지역 변수 : 메소드				
 * 		--------------------------메소드 종료시까지 사용
 * 
 * 		인스턴스 변수
 * 			ㄴ 객체명.변수명
 * 			ㄴ 클래스 블록에 선언
 * 			ㄴ 자동 초기화
 * 				ㄴ int => 0
 * 				ㄴ double => 0.0 
 * 				ㄴ long => 0L
 * 				ㄴ boolean => false
 * 				ㄴ char => '\0'
 * 				ㄴ String => null
 * 			ㄴ 초기화
 * 				ㄴ 1. 명시적 초기화
 * 				ㄴ 2. 초기화 블록 이용
 * 				ㄴ 3. 생성자 이용 : 변수 초기화를 담당하는 역할
 * 				ㄴ 클래스 블록 
 * 					ㄴ class ClassName{
 * 							구현은 할 수 없음 선언만 가능
 * 								ㄴ 구현 
 * 									ㄴ 연산자 처리 
 * 									ㄴ 제어문 사용
 * 									ㄴ 파일 읽기
 * 									ㄴ 데이터 연결
 * 									ㄴ 서버 연결
 * 									int a = 10 // 이건 가능
 * 									int b;
 * 									b = 20; // 구현임 => 오류	
 * 									ㄴ 자동 로그인 / 아이디 읽기 / 파일 읽기
 * 						}
 * 
 * 		정적 변수
 * 			ㄴ 클래스명.변수명 => static
 * 			class ClassName{
 * 				static int a; => 0값 초기화
 * 					=> static int a = 10; => 명시적인 초기화
 * 
 * 		
 * 				}
 * 				=> static은 공유
 * 				   static은 static만 호출이 가능
 * 					
 * 		지역 변수 
 * 			ㄴ 메소드 안에서만 가능 : 변수명
 * 		지역 변수 우선순위
 * 		--------------
 * 			ㄴ 메소드 , 생성자, 블록 내부에서 선언
 * 			ㄴ 반드시 초기화 후에 사용
 * 			ㄴ 메소드 실행이 끝나면 자동 소멸
 * 
 * 		프로그램에서 계속 유지해야되는 변수
 * 		----------------------------- 인스턴스( 따로 저장 ), 정적변수( 한개만 사용 )
 * 
 * 		사용 후에 버리는 경우 : 지역 변수
 * 		반복문
 * 		
 * 		클래스 전체 구조
 * 		class ClassName{
 * 
 * 			------------------------------
 * 			변수 선언
 * 				ㄴ 인스턴스
 * 					ㄴ [접근 지정어] 데이터형 변수명
 * 						ㄴ 생성 : 클래스명 객체명 = new 생성자();
 * 									ㄴ 객체명.변수명
 * 						ㄴ new에 따라 여러개를 저장할 수 있다
 *  
 * 				ㄴ 클래스 변수 / 정적변수 / 공유 변수
 * 					ㄴ [접근 지정어] static 데이터형 변수명
 * 						ㄴ 클래스명.변수명
 * 
 *			클래스구성요소_변수 aa = new 클래스구성요소_변수();
				ㄴ 동적 메모리 => new마다 새로운 메모리를 만들어준다
				ㄴ 클래스에 선언된 변수를 모아서 한개의 메모리를 만들어 준다
				ㄴ 메모리 주소를 객체변수에 전송
 * 		
 * 			Scanner scan = new Scanner(System.in);
 * 			scan.nextInt() => instance : 메모리에 저장된 데이터
 * 			Scanner scan1 = new Scanner(System.in);
 * 			scan1.nextInt();
 * 			
 * 			Math.random() => static
 * 			ㄴ 다른 객체가 가지고 있는 변수에 대한 접근이 불가능하다
 * 			ㄴ 
 * 
 * 
 * 			------------------------------
 * 			생성자 : 변수에 대한 초기화 : 생략
 * 					ㄴ 가장 먼저 호출되는 메소드
 * 					ㄴ 시작과 동시에 처리
 * 					ㄴ 변수 초기화 : 데이터베이스 , 쿠키
 * 									네트워크
 * 
 * 			------------------------------
 * 			메소드 선언 : 기능 처리 => 메뉴 , 버튼
 * 			------------------------------
 * 
 * 
 * 
 * 
 * 
 * 
 */




public class 클래스구성요소_변수 {

	static int a =10;
	int b = 20;
	public static void main(String[] args) {

		System.out.println(a);
//		System.out.println(b); // 오류남
		클래스구성요소_변수 aa = new 클래스구성요소_변수();
		System.out.println(aa.b);
	}

}
